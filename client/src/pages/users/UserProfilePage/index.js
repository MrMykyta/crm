// src/pages/user/UserEntityPage/index.jsx
import { useEffect, useState } from "react";
import EntityDetailPage from "../../_scaffold/EntityDetailPage";
import { userSchema, toFormUser, toApiUser } from "../../../schemas/user.schema";
import UserAvatarHeader from "../../../components/user/UserAvatarHeader";
import UserDetailTabs from "../UserDetailPage";

// –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å —Ç–∞–∫–∏–µ API:
import { getMe, updateMe } from "../../../api/user"; // –µ—Å–ª–∏ –¥—Ä—É–≥–∏–µ ‚Äî –∑–∞–º–µ–Ω–∏

export default function UserEntityPage() {
  const [base, setBase] = useState(null);

  useEffect(() => {
    (async () => {
      const me = await getMe();
      setBase(me);
    })().catch(console.error);
  }, []);

  if (!base) return null;

  const load = async () => base;

  const save = async (_id, payload) => {
    const saved = await updateMe(payload); // —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—ë—Ç —Å–≤–µ–∂–∏–π user
    setBase(saved);
    return saved;
  };

  return (
    <EntityDetailPage
    id={"me"}
    tabs={[
      { key: "security", label: "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å" },
      { key: "appearance", label: "–í–Ω–µ—à–Ω–∏–π –≤–∏–¥" },
      { key: "notifications", label: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" },
      { key: "preferences", label: "–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è" },
      
    ]}
    schemaBuilder={userSchema}
    toForm={toFormUser}
    toApi={toApiUser}
    load={load}
    save={save}
    storageKeyPrefix="user"
    autosave={{ debounceMs: 500 }}
    clearDraftOnUnmount
    leftTop={({ values, onChange }) => (
      <UserAvatarHeader values={values} onChange={onChange} />
    )}
    // üëá –≤–æ—Ç —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ
    RightTabsComponent={UserDetailTabs}
  />
  );
}